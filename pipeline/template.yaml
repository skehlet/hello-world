---
AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  GitHubRepo:
    Type: String

  GitHubBranch:
    Type: String
    Default: main

  GitHubUser:
    Type: String

Resources:
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "CodePipelineNestedCFNAccessPolicy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "s3:DeleteObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:PutObject"
                  - "s3:GetBucketPolicy"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource:
                  - !Ref CodeStarConnection
              # Add this when I switch from Github to CodeCommit:
              # - Effect: "Allow"
              #   Action:
              #     - "codecommit:ListBranches"
              #     - "codecommit:ListRepositories"
              #     - "codecommit:BatchGetRepositories"
              #     - "codecommit:Get*"
              #     - "codecommit:GitPull"
              #     - "codecommit:UploadArchive"
              #   Resource:
              #     - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CFNTemplateRepoName}
              #     - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ValidateResourcesRepoName}
              - Effect: "Allow"
                Action:
                  - "cloudformation:CreateChangeSet"
                  - "cloudformation:CreateStack"
                  - "cloudformation:CreateUploadBucket"
                  - "cloudformation:DeleteStack"
                  - "cloudformation:Describe*"
                  - "cloudformation:List*"
                  - "cloudformation:UpdateStack"
                  - "cloudformation:ValidateTemplate"
                  - "cloudformation:ExecuteChangeSet"
                Resource:
                  - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Prod-${AWS::StackName}*
              # - Effect: Allow
              #   Action:
              #     - codedeploy:CreateDeployment
              #     - codedeploy:CreateDeploymentGroup
              #     - codedeploy:GetApplication
              #     - codedeploy:GetApplicationRevision
              #     - codedeploy:GetDeployment
              #     - codedeploy:GetDeploymentConfig
              #     - codedeploy:RegisterApplicationRevision
              #   Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt CodeBuildProject.Arn
              - Effect: "Allow"
                Action:
                  - "iam:PassRole"
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/CloudFormationRole-${AWS::StackName}

  CloudFormationRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub CloudFormationRole-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "cloudformation.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: "CloudFormationNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "iam:AddRoleToInstanceProfile"
                  - "iam:AttachRolePolicy"
                  - "iam:CreateInstanceProfile"
                  - "iam:CreatePolicy"
                  - "iam:CreateRole"
                  - "iam:DeleteInstanceProfile"
                  - "iam:DeletePolicy"
                  - "iam:DeleteRole"
                  - "iam:DeleteRolePolicy"
                  - "iam:DetachRolePolicy"
                  - "iam:GetInstanceProfile"
                  - "iam:GetPolicy"
                  - "iam:GetRole"
                  - "iam:GetRolePolicy"
                  - "iam:ListAttachedRolePolicies"
                  - "iam:ListInstanceProfiles"
                  - "iam:ListInstanceProfilesForRole"
                  - "iam:ListRolePolicies"
                  - "iam:ListRoles"
                  - "iam:PassRole"
                  - "iam:PutRolePolicy"
                  - "iam:RemoveRoleFromInstanceProfile"
                Resource:
                  - Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/HelloWorldLambdaRole
              # - Effect: "Allow"
              #   Action:
              #     - "ec2:Describe*"
              #     - "ec2:CreateSecurityGroup"
              #     - "autoscaling:Describe*"
              #     - "elasticloadbalancing:Describe*"
              #     - "elasticloadbalancing:CreateLoadBalancer"
              #     - "autoscaling:CreateAutoScalingGroup"
              #     - "autoscaling:CreateLaunchConfiguration"
              #   Resource:
              #     - "*"
              # - Effect: "Allow"
              #   Action:
              #     - "ec2:AttachNetworkInterface"
              #     - "ec2:AttachVolume"
              #     - "ec2:AuthorizeSecurityGroupIngress"
              #     - "ec2:CreateNetworkInterface"
              #     - "ec2:CreateTags"
              #     - "ec2:CreateVolume"
              #     - "ec2:DeleteSecurityGroup"
              #     - "ec2:DeleteTags"
              #     - "ec2:DeleteVolume"
              #     - "ec2:DetachNetworkInterface"
              #     - "ec2:DetachVolume"
              #     - "ec2:MonitorInstances"
              #     - "ec2:RebootInstances"
              #     - "ec2:ReleaseAddress"
              #     - "ec2:RunInstances"
              #     - "ec2:StartInstances"
              #     - "ec2:StopInstances"
              #     - "ec2:TerminateInstances"
              #     - "ec2:UnmonitorInstances"
              #   Resource:
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}::image/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:internet-gateway/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:key-pair/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:network-interface/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:subnet/*
              #     - Fn::Sub: arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*
              # - Effect: "Allow"
              #   Action:
              #     - "iam:AddRoleToInstanceProfile"
              #     - "iam:CreateInstanceProfile"
              #     - "iam:DeleteInstanceProfile"
              #     - "iam:GetInstanceProfile"
              #     - "iam:ListInstanceProfiles"
              #     - "iam:ListInstanceProfilesForRole"
              #     - "iam:RemoveRoleFromInstanceProfile"
              #   Resource:
              #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:instance-profile/Test-${AWS::StackName}-SecurityStack*
              #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:instance-profile/UAT-${AWS::StackName}-SecurityStack*
              #     - Fn::Sub: arn:aws:iam::${AWS::AccountId}:instance-profile/Prod-${AWS::StackName}-SecurityStack*
              # - Effect: "Allow"
              #   Action:
              #     - "rds:AddTagsToResource"
              #     - "rds:CreateDBInstance"
              #     - "rds:CreateDBSecurityGroup"
              #     - "rds:DeleteDBInstance"
              #     - "rds:DeleteDBSecurityGroup"
              #     - "rds:DescribeDBInstances"
              #     - "rds:DescribeDBParameterGroups"
              #     - "rds:DescribeDBParameters"
              #     - "rds:DescribeDBSecurityGroups"
              #     - "rds:DescribeDBSubnetGroups"
              #     - "rds:DescribeOptionGroups"
              #     - "rds:ModifyDBInstance"
              #     - "rds:RebootDBInstance"
              #     - "rds:RemoveTagsFromResource"
              #   Resource:
              #     - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:*
              #     - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:og:*
              #     - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:pg:*
              #     - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:secgrp:*
              #     - Fn::Sub: arn:aws:rds:${AWS::Region}:${AWS::AccountId}:subgrp:*
              # - Effect: "Allow"
              #   Action:
              #     - "elasticloadbalancing:AddTags"
              #     - "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer"
              #     - "elasticloadbalancing:AttachLoadBalancerToSubnets"
              #     - "elasticloadbalancing:ConfigureHealthCheck"
              #     - "elasticloadbalancing:CreateListener"
              #     - "elasticloadbalancing:CreateLoadBalancerListeners"
              #     - "elasticloadbalancing:CreateLoadBalancerPolicy"
              #     - "elasticloadbalancing:DeleteListener"
              #     - "elasticloadbalancing:DeleteLoadBalancer"
              #     - "elasticloadbalancing:DeleteLoadBalancerListeners"
              #     - "elasticloadbalancing:DeleteLoadBalancerPolicy"
              #     - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
              #     - "elasticloadbalancing:DetachLoadBalancerFromSubnets"
              #     - "elasticloadbalancing:ModifyListener"
              #     - "elasticloadbalancing:ModifyLoadBalancerAttributes"
              #     - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
              #     - "elasticloadbalancing:RemoveTags"
              #     - "elasticloadbalancing:SetSecurityGroups"
              #     - "elasticloadbalancing:SetSubnets"
              #     - "elasticloadbalancing:SetLoadBalancerPoliciesOfListener"
              #     - "elasticloadbalancing:EnableAvailabilityZonesForLoadBalancer"
              #     - "elasticloadbalancing:DisableAvailabilityZonesForLoadBalancer"
              #   Resource:
              #     - Fn::Sub: arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:loadbalancer/WebELB-*
              # - Effect: "Allow"
              #   Action:
              #     - "autoscaling:AttachInstances"
              #     - "autoscaling:AttachLoadBalancers"
              #     - "autoscaling:CreateOrUpdateTags"
              #     - "autoscaling:DeleteAutoScalingGroup"
              #     - "autoscaling:DeleteLaunchConfiguration"
              #     - "autoscaling:DeleteTags"
              #     - "autoscaling:SetDesiredCapacity"
              #     - "autoscaling:SetInstanceHealth"
              #     - "autoscaling:TerminateInstanceInAutoScalingGroup"
              #     - "autoscaling:UpdateAutoScalingGroup"
              #   Resource:
              #     - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Test-${AWS::StackName}-ServerStack-*
              #     - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/UAT-${AWS::StackName}-ServerStack-*
              #     - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:autoScalingGroup:*:autoScalingGroupName/Prod-${AWS::StackName}-ServerStack-*
              #     - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:Test-${AWS::StackName}-ServerStack-*
              #     - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:UAT-${AWS::StackName}-ServerStack-*
              #     - Fn::Sub: arn:aws:autoscaling:${AWS::Region}:${AWS::AccountId}:launchConfiguration:${AWS::AccountId}:*:Prod-${AWS::StackName}-ServerStack-*
              - Effect: "Allow"
                Action:
                  - "s3:GetObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
              - Effect: "Allow"
                Action:
                  - "lambda:GetFunction"
                  - "lambda:CreateFunction"
                  - "lambda:DeleteFunction"
                  - "lambda:UpdateFunctionConfiguration"
                  - "lambda:UpdateFunctionCode"
                Resource:
                  - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:HelloWorld

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub CodeBuildRole-${AWS::StackName}
      Path: /service-role/
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: "CodeBuildNestedCFNAccessPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # - Effect: "Allow"
              #   Action:
              #     - "cloudformation:Get*"
              #     - "cloudformation:Describe*"
              #     - "cloudformation:List*"
              #   Resource:
              #     - Fn::Sub: arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/Test-${AWS::StackName}*
              # - Effect: "Allow"
              #   Action:
              #     - "codecommit:ListBranches"
              #     - "codecommit:ListRepositories"
              #     - "codecommit:BatchGetRepositories"
              #     - "codecommit:Get*"
              #     - "codecommit:GitPull"
              #   Resource:
              #     - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${CFNTemplateRepoName}
              #     - Fn::Sub: arn:aws:codecommit:${AWS::Region}:${AWS::AccountId}:${ValidateResourcesRepoName}
              # - Effect: "Allow"
              #   Action:
              #     - "ec2:Describe*"
              #     - "cloudformation:ValidateTemplate"
              #     - "elasticloadbalancing:Describe*"
              #     - "autoscaling:Describe*"
              #     - "iam:Get*"
              #     - "iam:List*"
              #     - "logs:Describe*"
              #     - "logs:Get*"
              #     - "tag:Get*"
              #   Resource:
              #     - "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                # Resource:
                #   - Fn::Sub: arn:aws:s3:::codepipeline-${AWS::Region}-*
                #   - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}/*
                #   - Fn::Sub: arn:aws:s3:::${ArtifactStoreS3Location}
                Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodeStarConnection:
    Type: "AWS::CodeStarConnections::Connection"
    Properties:
      ConnectionName: CfnExamplesGitHubConnection
      ProviderType: GitHub

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:5.0
        Type: LINUX_CONTAINER
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildRole.Arn

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Name: HelloWorldCodePipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        # - Name: Source
        #   Actions:
        #   - Name: Source
        #     ActionTypeId:
        #       Category: Source
        #       Owner: AWS
        #       Provider: S3
        #       Version: '1'
        #     Configuration:
        #       PollForSourceChanges: 'false'
        #       S3Bucket: !Ref ArtifactBucket
        #       S3ObjectKey: builds/hello-world.zip
        #     OutputArtifacts:
        #     - Name: SourceArtifact

        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: "1"
                Provider: CodeStarSourceConnection
              Configuration:
                ConnectionArn: !Ref CodeStarConnection
                BranchName: !Ref GitHubBranch
                FullRepositoryId: !Sub ${GitHubUser}/${GitHubRepo}
              OutputArtifacts:
                - Name: AppArtifact
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                BatchEnabled: "false"
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: !Sub '[{"name":"ARTIFACT_BUCKET","value":"${ArtifactBucket}","type":"PLAINTEXT"}]'
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: AppArtifact
              Namespace: BuildVariables

        - Name: Deploy
          Actions:
            - Name: CreateProdChangeSet
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              OutputArtifacts:
                - Name: CreatedProdChangeSet
              Configuration:
                ActionMode: CHANGE_SET_REPLACE
                ChangeSetName: ProdCBChangeSet
                RoleArn: !GetAtt CloudFormationRole.Arn
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub Prod-${AWS::StackName}
                # TemplateConfiguration: BuildArtifact::config.json
                TemplatePath: BuildArtifact::outputTemplate.yml
              RunOrder: 1
            # - Name: ProdApproval
            #   ActionTypeId:
            #     Category: Approval
            #     Owner: AWS
            #     Version: 1
            #     Provider: Manual
            #   Configuration:
            #     NotificationArn:
            #       Fn::Sub: arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProdTopic}
            #     CustomData: Approve deployment in production.
            #   RunOrder: 2
            - Name: DeployProduction
              InputArtifacts:
                - Name: CreatedProdChangeSet
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: "1"
                Provider: CloudFormation
              Configuration:
                ActionMode: CHANGE_SET_EXECUTE
                ChangeSetName: ProdCBChangeSet
                StackName: !Sub Prod-${AWS::StackName}
              RunOrder: 3

Outputs:
  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
